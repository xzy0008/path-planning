% determines how to calculate

clear
clc
% ************************************************************************
% define symbols
% a  - x coordinate of arc center
% b  - y coordinate of arc center
% r  - radius of arc
% x1 - x coordinate of 1st point on waypoint
% y1 - y coordinate of 1st point on waypoint
% x2 - x coordinate of 2nd point on waypoint
% y2 - y coordinate of 2nd point on waypoint
% t1 - slope of tangent at 1st point
% t2 - slope of tangent at 2nd point
syms a b x1 x2 y1 y2 t1 t2 r;

R_MAX=60;   % maximum radius (m)

% ************************************************************************
% solve for arc parameters using tangent at first point and coordinates of
% both points and create inline functions for each
[a_s,b_s,r_s]=solve('t1=-((x1-a)/(y1-b))','r=sqrt((x1-a)^2+(y1-b)^2)', 'r=sqrt((x2-a)^2+(y2-b)^2)',a,b,r);
%[a_s,b_s,r_s]=solve('t2=-((x2-a)/(y2-b))','r=sqrt((x1-a)^2+(y1-b)^2)', 'r=sqrt((x2-a)^2+(y2-b)^2)',a,b,r);
% all functions are function of (t1, x1, x2, y1, y2)
a_inl=inline(char(simplify(a_s)));
b_inl=inline(char(simplify(b_s)));
r_inl=inline(char(simplify(r_s)));

% ************************************************************************
% test results

waypoints=[0,0;1,0;2,.5;3,1;3.5,1.2;4,1;5,.5;6,0;7,0;8,.2;9,.5;10,1];
waypoints=[0,0;1,0;2,.5;3,1;3.5,1.2;4,1;5,.5;6,0;7,0];
%waypoints=[0,0;1,0;2,.5;3,1;4,1;5,.5;6,0;7,0];

% load darpa_waypoints.dat;
% waypoints=darpa_waypoints;

% load video_path.txt;
% waypoints=video_path;

% load NCAT_will.txt;
% waypoints=[-NCAT_will(:,2),NCAT_will(:,1)];

load line_arc_track.txt;
waypoints=[line_arc_track(:,1),line_arc_track(:,2)];

end_point=length(waypoints)-1;      % find index of last point
%end_point=8;
t_arc(1)=(waypoints(1,2)-waypoints(2,2))/(waypoints(1,1)-waypoints(2,1));   % calculate tangent between first two points
x_arc(1)=waypoints(1,1);
y_arc(1)=waypoints(1,2);
for i=1:end_point;
    r_arc(i)=r_inl(t_arc(i),waypoints(i,1), waypoints(i+1,1),waypoints(i,2),waypoints(i+1,2));
    if (r_arc(i)>R_MAX)
        %t_arc(i+1)=t_arc(i);
        if (waypoints(i+1,1)-waypoints(i,1)) == 0
            t_arc(i+1)=9999999;
        else
            t_arc(i+1)=(waypoints(i+1,2)-waypoints(i,2))/(waypoints(i+1,1)-waypoints(i,1));
        end
        x_arc(i+1)=waypoints(i,1);
        y_arc(i+1)=waypoints(i,2);
        r_arc(i)=inf;
        %(-waypoints(i,2)-waypoints(i+1,1)*t_arc(i)+waypoints(i,1)*t_arc(i)+waypoints(i+1,2))
        %i
    else
        x_arc(i+1)=a_inl(t_arc(i),waypoints(i,1), waypoints(i+1,1),waypoints(i,2),waypoints(i+1,2));
        y_arc(i+1)=b_inl(t_arc(i),waypoints(i,1), waypoints(i+1,1),waypoints(i,2),waypoints(i+1,2));
        %x_arc(i)=a_inl(t_arc(i),waypoints(i+1,1), waypoints(i,1),waypoints(i+1,2),waypoints(i,2));
        %y_arc(i)=b_inl(t_arc(i),waypoints(i+1,1), waypoints(i,1),waypoints(i+1,2),waypoints(i,2));
        r_arc(i)=r_inl(t_arc(i),waypoints(i,1), waypoints(i+1,1),waypoints(i,2),waypoints(i+1,2));
        t_arc(i+1)=-(waypoints(i+1,1)-x_arc(i+1))/(waypoints(i+1,2)-y_arc(i+1));
    end
end
% scatter(waypoints(:,1),waypoints(:,2),'g');
% hold on
% scatter(x_arc,y_arc,'rx');

path.end.E=waypoints(:,1);
path.end.N=waypoints(:,2);
path.center.E(1)=path.end.E(1);
path.center.N(1)=path.end.N(1);
path.center.E=x_arc';
path.center.N=y_arc';
path.speed=2*ones(end_point+1,1);

plot_linetracker_path(path,1,0);

%----------------------------------------------------
% Load path information
data=load('line_arc_track.txt');
path2.end.E=data(:,1);
path2.end.N=data(:,2);
path2.center.E=data(:,3);
path2.center.N=data(:,4);
path2.speed=data(:,5);
%----------------------------------------------------

plot_linetracker_path(path2,2,0);