function out=smoothLinesWithArc(line1, line2, radius, pathSpeed, plotResults)
%SMOOTHLINESWITHARC Smooths the angle made by two intersecting line segment
%   with an arc
%
%   Syntax: smoothLinesWithArc(line1, line2, radius, pathSpeed,
%           plotResults)
%		- line1 = ppLineSegment structure defining 1st line
%		- line2 = ppLineSegment structure defining 2nd line
%		- radius = minimum turning radius of vehicle
%       - pathSpeed = speed for given path segment
%       - plot_results (optional) = determines whether results are plotted or not
%
%   Output: An array of ppSegment objects defining a Dubins path
%
% Written by David Hodo - hododav@auburn.edu - December 2007


%% check input arguments
if nargin==0
    % line1=ppLineSegment(5,8,10,9);
    % line2=ppLineSegment(10,9,18,2);

    % line1=ppLineSegment(5,8,10,9);
    % line2=ppLineSegment(10,9,18,20);

    % line1=ppLineSegment(5,8,-10,2);
    % line2=ppLineSegment(-10,2,18,2);

    % line1=ppLineSegment(3,5,-10,2); % segment is not long enough - should fail
    % line2=ppLineSegment(-10,2,18,2);

    line1=ppLineSegment(3,10,10,9);
    line2=ppLineSegment(10,9,18,20);

    radius=3;
    plotResults=true;
    pathSpeed=1;
elseif nargin==4
    plotResults=false;
end

%% calculate angle made by lines
theta1=atan2(line1.x1-line1.x2,line1.y1-line1.y2);
theta2=atan2(line2.x2-line2.x1,line2.y2-line2.y1);
theta=theta2-theta1;

if (theta<pi)
    CCW=1;
else
    CCW=0;
end

%% create two parallel lines shifted by radius
if (CCW)
    lshift1=shiftppLineSegment(line1,-radius);
    lshift2=shiftppLineSegment(line2,-radius);    
else   
    lshift1=shiftppLineSegment(line1,radius);
    lshift2=shiftppLineSegment(line2,radius);
end

%% calculate intersection of arc segments
[intersect x y]=LineSegmentIntersection(lshift1,lshift2);

% if intersection was not found, the line segments are not long enough to
% smooth
if (intersect==2)
    % lines are colinear, no smoothing is needed
    out(1)=ppSegment(line1.x1,line1.y1, line2.x2, line2.y2, line1.x1,line1.y1, 2, pathSpeed);
    return;
elseif (intersect~=1)
   error('Unable to smooth path!') 
end

%% calculate circle endpoints
[x_start y_start]=closestPointOnLine(line1, x, y);
[x_end y_end]=closestPointOnLine(line2, x, y);

%% create smoothing arc
smoothArc=ppCircularArc(x_start,y_start,x_end,y_end,x,y,CCW);

%% create dubins path segments
out(1)=ppSegment(line1.x1,line1.y1, x_start, y_start, line1.x1,line1.y1, 2, pathSpeed);
out(2)=ppSegment(x_start,y_start,x_end,y_end, x,y, CCW, pathSpeed);
out(3)=ppSegment(x_end,y_end, line2.x2, line2.y2, line2.x1,line2.y1, 2, pathSpeed);


%% plot results
if plotResults
    figure(1);
    clf;
    hold on;
    plotppLineSegment(line1);
    plotppLineSegment(line2);
    % plot shifted lines
    plotppLineSegment(lshift1,'r');
    plotppLineSegment(lshift2,'g');
    % plot intersection
    plot(x,y,'k^')
    % plot arc start and endpoints
    plot(x_start,y_start,'b^')
    plot(x_end,y_end,'b^')
    % plot arc
    plotppCircularArc(smoothArc,'c');
    axis equal;
    
    figure(2);
    clf;
    hold on;
    plotppLineSegment(line1);
    plotppLineSegment(line2);
    plot_linetracker_path(out,gca,'RS',false,'r:');
    
end


end